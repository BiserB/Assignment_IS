@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <h1 class="h4">Welcome to Assignment Interface</h1>
</div>

<section class="py-4 px-5">
    <div class="row">
        <div class="col-sm-4">
            <div class="card" style="width: 24rem;">
                <div class="card-body">
                    <h6 class="card-subtitle mb-2 text-muted">Task 1 Assignment</h6>
                    <p class="card-text">
                        Define Person class with name and age fields.
                        Add 3 constructors:<br />
                        - The first without arguments and the result is "No name; Years = 1;<br />
                        - The second only accepts a parameter for years and the result is "No name; Years =
                        the parameter ";<br />
                        - The third one accepts parameters name and years and the result is "Name; Years";<br />
                        Use the Person class. Create a new Family class. The class should contain a list of method people
                        to add new people and a way to get the oldest person out.
                        Write a method that reads the names and ages of N and adds them to the list. Write
                        a method that earns all people who age> 30.
                    </p>
                    <a href="Task1" class="card-link">to task 1</a>
                </div>
            </div>
        </div>

        <div class="col-sm-4">
            <div class="card" style="width: 24rem;">
                <div class="card-body">
                    <h6 class="card-subtitle mb-2 text-muted">Task 2 Assignment</h6>
                    <p class="card-text">
                        You are the owner of a courier company and want to make a system for tracking your cars and their
                        cargo.
                        Define a class Car that holds information about model, engine, cargo and a collection of exactly 4 tires.
                        The engine, cargo and tire should be separate classes. Create a constructor that receives all information
                        about the Car and creates and initializes its inner components (engine, cargo and tires).
                        On the first line of input you will receive a number N - the amount of cars you have. On each of the next N
                        lines you will receive information about a car in the format “Model EngineSpeed EnginePower
                        CargoWeight CargoType Tire1Pressure Tire1Age Tire2Pressure Tire2Age Tire3Pressure
                        Tire3Age Tire4Pressure Tire4Age” where the speed, power, weight and tire age are integers, tire
                        pressure is a double.
                        After the N lines you will receive a single line with one of 2 commands: “fragile” or “flamable”. If the
                        command is “fragile” print all cars whose Cargo Type is “fragile” with a tire whose pressure is < 1. If the
                        command is “flamable” print all cars whose Cargo Type is “flamable” and have Engine Power > 250. The
                        cars should be printed in order of appearing in the input.
                    </p>
                    <a href="Task1" class="card-link">to task 2</a>
                </div>
            </div>
        </div>

        <div class="col-sm-4">
            <div class="card" style="width: 24rem;">
                <div class="card-body">
                    <h6 class="card-subtitle mb-2 text-muted">Task 3 Assignment</h6>
                    <p class="card-text">
                        Create application /.net, web, console - doesn't matter / with user interface:
                        The system must perform the following functionalities:
                        - input screen through which created users to log into the system through
                        username and password
                        - View / Edit to-do list: Tasks (To-Do list)
                        each user can only view / edit their own tasks
                        - be able to mark / archive the corresponding rows as completed
                        - view the completed Tasks separately in an archive list.
                    </p>
                    <a href="Task1" class="card-link">to task 3</a>
                </div>
            </div>
        </div>
    </div>
</section>